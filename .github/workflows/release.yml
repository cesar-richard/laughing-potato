name: Release & Deploy

on:
  #  workflow_run:
  #    workflows: [ "Tests & Coverage" ]
  #    branches: [ "master" ]
  #    types: [ completed ]
  push:
    branches:
      - master
      - cr/mini
  workflow_dispatch:

env:
  # Secrets
  LAUGHINGPOTATO_DB_DEFAULT: ${{ secrets.LAUGHINGPOTATO_DB_DEFAULT }}
  LAUGHINGPOTATO_DJANGO_SECRET: ${{ secrets.LAUGHINGPOTATO_DJANGO_SECRET }}
  LAUGHINGPOTATO_OAUTH_SETTINGS_ID: ${{ secrets.LAUGHINGPOTATO_OAUTH_SETTINGS_ID }}
  LAUGHINGPOTATO_OAUTH_SETTINGS_SECRET: ${{ secrets.LAUGHINGPOTATO_OAUTH_SETTINGS_SECRET }}
  LAUGHINGPOTATO_WEEZPAY_APPKEY: ${{ secrets.LAUGHINGPOTATO_WEEZPAY_APPKEY }}
  # Vars
  LAUGHINGPOTATO_BASE_URL: ${{ vars.LAUGHINGPOTATO_BASE_URL }}
  LAUGHINGPOTATO_DJANGO_ALLOWED_HOSTS: ${{ vars.LAUGHINGPOTATO_DJANGO_ALLOWED_HOSTS }}
  LAUGHINGPOTATO_DJANGO_DEBUG: ${{ vars.LAUGHINGPOTATO_DJANGO_DEBUG }}
  LAUGHINGPOTATO_LOG_LEVEL: ${{ vars.LAUGHINGPOTATO_LOG_LEVEL }}
  LAUGHINGPOTATO_OAUTH_REDIRECT_URI: ${{ vars.LAUGHINGPOTATO_OAUTH_REDIRECT_URI }}

jobs:
  on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    steps:
      - name: Discord notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been failed to release.'


  #  on-success:
  #    needs:
  #      - tag
  #      - release
  #      - deploy-frontend
  #      - deploy-backend
  #      - migrate
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Discord notification
  #        uses: Ilshidur/action-discord@master
  #        env:
  #          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
  #        with:
  #          args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been released to ${{ needs.tag.outputs.tag_name }} and deployed on production server.  Release : ${{ needs.release.outputs.html_url }}'


  tag:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} || ${{ github.event.workflow_run.workflow_dispatched }}
    name: Create Tag
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag_version.outputs.new_tag }}
      tag_changelog: ${{ steps.tag_version.outputs.changelog }}
    steps:
      - uses: actions/checkout@v3
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}


  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - tag
    permissions:
      contents: write
    outputs:
      html_url: ${{ steps.create_release.outputs.html_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.tag.outputs.tag_name }}
          generateReleaseNotes: true


  deploy-backend:
    name: Deploying backend to production server
    environment: production
    runs-on: [ self-hosted, python ]
    needs:
      - tag
      - release
    concurrency: deploy-backend
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Deploy to production
        run: rsync -avz -O --progress --delete --exclude-from=.rsyncignore . /mnt/sites/laughingpotato/
      - name: Generate dotenv file
        run: |
          cd /mnt/sites/sparkle/
          echo # Secrets >> .env
          echo LAUGHINGPOTATO_DB_DEFAULT=$LAUGHINGPOTATO_DB_DEFAULT >> .env
          echo LAUGHINGPOTATO_DJANGO_ALLOWED_HOSTS=$LAUGHINGPOTATO_DJANGO_ALLOWED_HOSTS >> .env
          echo LAUGHINGPOTATO_DJANGO_SECRET=$LAUGHINGPOTATO_DJANGO_SECRET >> .env
          echo LAUGHINGPOTATO_OAUTH_SETTINGS_ID=$LAUGHINGPOTATO_OAUTH_SETTINGS_ID >> .env
          echo LAUGHINGPOTATO_OAUTH_SETTINGS_SECRET=$LAUGHINGPOTATO_OAUTH_SETTINGS_SECRET >> .env
          echo LAUGHINGPOTATO_WEEZPAY_APPKEY=$LAUGHINGPOTATO_WEEZPAY_APPKEY >> .env
          echo # Vars >> .env
          echo LAUGHINGPOTATO_BASE_URL=$LAUGHINGPOTATO_BASE_URL >> .env
          echo LAUGHINGPOTATO_DJANGO_DEBUG=$LAUGHINGPOTATO_DJANGO_DEBUG >> .env
          echo LAUGHINGPOTATO_LOG_LEVEL=$LAUGHINGPOTATO_LOG_LEVEL >> .env
          echo LAUGHINGPOTATO_OAUTH_REDIRECT_URI=$LAUGHINGPOTATO_OAUTH_REDIRECT_URI >> .env
          echo LAUGHINGPOTATO_VERSION=${{ needs.tag.outputs.tag_name }} >> .env
      - name: Install python dependencies
        run: |
          cd /mnt/sites/sparkle/
          virtualenv venv
          source venv/bin/activate
          pip install -r requirements.txt


  deploy-frontend:
    name: Deploying frontend to production server
    environment: production
    runs-on: [ self-hosted, python ]
    needs:
      - tag
      - release
    concurrency: deploy-frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install front dependencies
        run: yarn install --frozen-lockfile --immutable --immutable-cache --check-cache
      - name: Generate dotenv file
        run: |
          echo # Secrets >> .env
          echo LAUGHINGPOTATO_DB_DEFAULT=$LAUGHINGPOTATO_DB_DEFAULT >> .env
          echo LAUGHINGPOTATO_DJANGO_ALLOWED_HOSTS=$LAUGHINGPOTATO_DJANGO_ALLOWED_HOSTS >> .env
          echo LAUGHINGPOTATO_DJANGO_SECRET=$LAUGHINGPOTATO_DJANGO_SECRET >> .env
          echo LAUGHINGPOTATO_OAUTH_SETTINGS_ID=$LAUGHINGPOTATO_OAUTH_SETTINGS_ID >> .env
          echo LAUGHINGPOTATO_OAUTH_SETTINGS_SECRET=$LAUGHINGPOTATO_OAUTH_SETTINGS_SECRET >> .env
          echo LAUGHINGPOTATO_WEEZPAY_APPKEY=$LAUGHINGPOTATO_WEEZPAY_APPKEY >> .env
          echo # Vars >> .env
          echo LAUGHINGPOTATO_BASE_URL=$LAUGHINGPOTATO_BASE_URL >> .env
          echo LAUGHINGPOTATO_DJANGO_DEBUG=$LAUGHINGPOTATO_DJANGO_DEBUG >> .env
          echo LAUGHINGPOTATO_LOG_LEVEL=$LAUGHINGPOTATO_LOG_LEVEL >> .env
          echo LAUGHINGPOTATO_OAUTH_REDIRECT_URI=$LAUGHINGPOTATO_OAUTH_REDIRECT_URI >> .env
          echo LAUGHINGPOTATO_VERSION=${{ needs.tag.outputs.tag_name }} >> .env
      - name: Build front
        run: yarn build
      - name: Deploy to production
        run: |
          rsync -avz -O --progress --delete ./node_modules/* /mnt/sites/sparkle/node_modules/
          rsync -avz -O --progress --delete ./sparkle/frontend /mnt/sites/sparkle/sparkle/


  migrate:
    name: Migrate database
    runs-on: [ self-hosted, python ]
    environment: production
    needs:
      - release
    concurrency: migrate
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Creating virtualenv
        run: python3 -m venv venv
      - name: Activate virtualenv
        run: source venv/bin/activate
      - name: Install requirements
        run: pip install django getconf split_settings environ xlsxwriter
      - name: Migrating database
        run: python3 manage.py migrate

  static-files-collection:
    name: Collect statics & restart apache
    environment: production
    runs-on: [ self-hosted, python ]
    needs:
      - tag
      - release
      - migrate
      - deploy-backend
      - deploy-frontend
    concurrency: static-files-collection
    steps:
      - name: Rebuild front to ensure paths
        run: cd /mnt/sites/laughingpotato && yarn build
      - name: Collect static files
        run: cd /mnt/sites/laughingpotato && rm -r /mnt/sites/laughingpotato/static && source venv/bin/activate && ./manage.py collectstatic --noinput
      - name: Restarting apache services
        run: sudo systemctl restart apache2.service
